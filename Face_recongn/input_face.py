# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'input_face.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets,QtGui
from PyQt5.QtWidgets import QDialog,QMessageBox,QPushButton
from PyQt5.QtCore import pyqtSignal
from Face_identity import *
import os
import sys
import shutil
import numpy as np


class input_face(QDialog):

    # 信号与槽
    closemeg = pyqtSignal(object)

    def __init__(self,parent = None):
        super(input_face,self).__init__(parent)

        self.Face_identity = Face_identity()
        self.setui()
        # 基本跟face的摄像头差不多

        # 初始化摄像头,定时器
        self.cap = cv2.VideoCapture(0)
        self.timer_camera = QtCore.QTimer()

        self.connect()  # 相应信号函数

        #抽取图片
        self.timer_camera.start(100)


        self.num = 1  # 保存图片的个数


    def setui(self):
        # 窗口
        self.setFixedSize(900, 800)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/Users/yixi/Desktop/main.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)
        self.setWindowTitle(u'录入人脸')

        # 摄像区
        self.camera = QtWidgets.QLabel(parent=self)
        self.camera.move(40, 60)
        self.camera.setFixedSize(640,480)


        # 提取人脸
        self.face = QtWidgets.QLabel(parent=self)
        self.face.move(700, 60)
        self.face.setFixedSize(184, 224)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.face.setFont(font)
        self.face.setStyleSheet("background-color: rgb(85, 255, 255);")
        #self.face.setText("<html><head/><body><p align=\"center\">人脸图片</p></body></html>")

        # 显示文字
        self.label = QtWidgets.QLabel(parent=self, text='请输入学号')
        self.label.move(100, 600)
        self.label.setFixedSize(130, 15)

        # 摄像区
        self.label1 = QtWidgets.QLabel(parent=self)
        self.label1.move(340, 35)

        font = QtGui.QFont()
        font.setPointSize(10)
        self.label1.setFont(font)
        self.label1.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.label1.setText("<html><head/><body><p align=\"center\">摄像区</p></body></html>")


        # 人脸
        self.label2 = QtWidgets.QLabel(parent=self, text='人脸')
        self.label2.move(720, 35)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label2.setFont(font)
        self.label2.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.label2.setText("<html><head/><body><p align=\"center\">拍摄图片显示区</p></body></html>")

        # 输入框
        self.lineEdit = QtWidgets.QLineEdit(self)
        self.lineEdit.move(238, 600)
        self.lineEdit.setFixedSize(113, 30)

        # 显示按钮
        self.Qpushbutton = QPushButton(parent=self, text='拍照')
        self.Qpushbutton.move(410, 600)
        self.Qpushbutton.setFixedSize(92, 30)

        # 显示信息的文本框
        self.textBrowser = QtWidgets.QTextBrowser(self)
        self.textBrowser.move(20, 650)
        font = QtGui.QFont()
        font.setPointSize(20)
        self.textBrowser.setFont(font)
        self.textBrowser.setFixedSize(680, 100)

    def connect(self):
        # 定时器任务
        self.timer_camera.timeout.connect(lambda :[self.show_camera()])
        # 按键信号链接
        self.Qpushbutton.clicked.connect(lambda :[self.show_face()])

    def show_camera(self):
        flag,self.image = self.cap.read()

        self.img,self.x,self.y,self.w,self.h = self.Face_identity.face_detection(self.image.copy())

        show_img = cv2.resize(self.img,(640,480))
        show_img = cv2.cvtColor(show_img, cv2.COLOR_BGR2RGB)  # 格式转化,主要是转化为RGB格式
        showImage = QtGui.QImage(show_img.data, show_img.shape[1], show_img.shape[0],
                                 QtGui.QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
        self.camera.setPixmap(QtGui.QPixmap.fromImage(showImage))  # 往显示视频的Label里 显示QImage

    def show_face(self):
        path = 'att_faces'

        input_id = self.lineEdit.text()
        print(f"相应的名称 ： {input_id}")
        print(os.path.isdir(path + '/' + str(input_id)))

        if os.path.isdir(path + '/' + str(input_id)) == True and len(os.listdir(path + '/' + str(input_id))) == 10:
            flag = QMessageBox.warning(None, "警告", "填写的学号或姓名已存在，如果继续录取数据则采取重新录取的形式",
                                       QMessageBox.Yes | QMessageBox.Cancel)  # 警告
            if flag == QMessageBox.Yes:
                print("准备重新录取数据")
                try :
                    shutil.rmtree(path + '/' + str(input_id))

                    print('删除 :'+str(os.path.isdir(path + '/' + str(input_id))))

                except Exception as e:
                    print(e)
            else:
                pass

        print("2区 debug")

        if len(input_id) != 0 and self.w != 0 and self.h != 0 :
            print("3区 debug")
            path_id = path + '/' + str(input_id)

            if os.path.exists(path_id) == False: # 没有就创建
                # 创建
                os.mkdir(path_id)

            print("4区 debug")

            # 显示到人脸图片区域
            show_img = self.img[self.y-3:self.y + self.h + 3,
                       self.x-3:self.x + self.w+3 ]  # 可以适当扩大 x是行行坐标，y是列坐标,适当扩大一下
            show_img = cv2.resize(show_img, (184, 224))


            show_img = cv2.cvtColor(show_img, cv2.COLOR_RGB2BGR)  # 格式转化,主要是转化为RGB格式

            showImage = QtGui.QImage(show_img.data, show_img.shape[1], show_img.shape[0],
                                     QtGui.QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
            self.face.setPixmap(QtGui.QPixmap.fromImage(showImage))  # 往显示视频的Label里 显示QImage


            print(show_img.shape)

            # 灰度化
            show_img = cv2.cvtColor(show_img, cv2.COLOR_BGR2GRAY)

            # 调整图像大小

            show_img = cv2.resize(show_img,(92,112))

            # 写入
            save_path = path_id + '/'+ str(self.num) + '.pgm'
            cv2.imwrite(save_path,show_img)



            self.textBrowser.clear()
            if self.num <= 10:
                self.textBrowser.append(f"还需要{10 - self.num}张图片")
            # 显示到人脸图片区

            self.num += 1

        elif len(input_id) == 0 :
            choice = QMessageBox.warning(None, "名字", "请先在相应的地方填写好学号或者姓名")  # 警告

        else :
            try:
                choice = QMessageBox.warning(None, "失败", "当前未识别到人脸")
            except Exception as e:

                print(f"{e}")


        if self.num > 10:
            choice = QMessageBox.warning(None, "拍照", "数据录取成功")

            self.num = 1

    def close_camera(self):
        # 关闭摄像头
        if self.cap.isOpened():
            # 将一些视频流清空
            self.cap.release()
            print("关闭摄像头")

        # 关闭定时器
        if self.timer_camera.isActive():
            self.timer_camera.stop()

    def closeEvent(self,SCloseEvent):
        print(f"进入事件 ---- {SCloseEvent}")
        choice = QMessageBox.warning(None, "关闭", "是否关闭", QMessageBox.Yes | QMessageBox.Cancel)  # 确认和退出

        if choice == QMessageBox.Yes:
            self.close_camera()
            self.closemeg.emit(None)



if __name__ == '__main__':

    App = QtWidgets.QApplication(sys.argv)
    win = input_face()
    win.show()
    sys.exit(App.exec_())

