# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test_face.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets,QtGui
from PyQt5.QtWidgets import QDialog,QMessageBox,QPushButton
from PyQt5.QtCore import pyqtSignal
from Face_identity import *
import numpy as np
import sys
from model import*

class test_face(QDialog):

    closemeg = pyqtSignal(object)

    def __init__(self,model = None,parent = None):
        super(test_face, self).__init__(parent)

        self.model = train_SVM('att_faces')

        self.setupUi()
        self.connect()

    def setupUi(self):

        self.setFixedSize(495, 600)
        self.centralwidget = QtWidgets.QWidget(parent=self)
        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setText("数据划分")
        self.label1.setGeometry(QtCore.QRect(30, 20, 70, 25))

        self.textline = QtWidgets.QLineEdit(self.centralwidget)
        self.textline.setGeometry(QtCore.QRect(115, 20, 61, 25))

        self.label2 = QtWidgets.QLabel(self.centralwidget)
        self.label2.setGeometry(QtCore.QRect(180, 20, 180, 25))
        self.label2.setText("(按照训练集占比填写)")

        self.pushbutton1 = QPushButton(parent=self, text='训练模型')
        self.pushbutton1.setGeometry(QtCore.QRect(30, 60, 131, 30))
        self.pushbutton1.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.pushbutton1.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))

        self.radiobutton = QtWidgets.QRadioButton(self.centralwidget,text = '训练集')
        self.radiobutton.setGeometry(QtCore.QRect(30, 110, 86, 30))
        self.radiobutton.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.radiobutton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        #self.radiobutton.setChecked(True)

        self.radiobutton2 = QtWidgets.QRadioButton(self.centralwidget,text = '测试集')
        self.radiobutton2.setGeometry(QtCore.QRect(120, 110, 86, 30))
        self.radiobutton2.setStyleSheet("background-color: rgb(255, 170, 127);")
        self.radiobutton2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))

        self.pushbutton2 = QtWidgets.QLabel(self)
        self.pushbutton2.setGeometry(QtCore.QRect(30, 150, 75, 30))
        self.pushbutton2.setText("<html><head/><body><p align=\"center\">acc</p></body></html>")
        self.pushbutton2.setStyleSheet("background-color: rgb(85, 170, 255);")

        self.label3 = QtWidgets.QLabel(parent = self)
        self.label3.setGeometry(QtCore.QRect(120, 150, 75, 30))
        self.label3.setStyleSheet("background-color: rgb(255, 255, 255);")

        self.pushbutton3 = QtWidgets.QLabel(self)

        self.pushbutton3.setGeometry(QtCore.QRect(30, 190, 75, 30))
        self.pushbutton3.setText("<html><head/><body><p align=\"center\">pre</p></body></html>")
        self.pushbutton3.setStyleSheet("background-color: rgb(85, 170, 255);")

        self.label4 = QtWidgets.QLabel(parent=self)
        self.label4.setGeometry(QtCore.QRect(120, 190, 75, 30))
        self.label4.setStyleSheet("background-color: rgb(255, 255, 255);")

        self.pushbutton4 = QtWidgets.QLabel(self)
        self.pushbutton4.setGeometry(QtCore.QRect(30, 230, 75, 30))
        self.pushbutton4.setText("<html><head/><body><p align=\"center\">recall</p></body></html>")
        self.pushbutton4.setStyleSheet("background-color: rgb(85, 170, 255);")

        self.label5 = QtWidgets.QLabel(parent=self)
        self.label5.setGeometry(QtCore.QRect(120, 230, 75, 30))
        self.label5.setStyleSheet("background-color: rgb(255, 255, 255);")

    def connect(self):
        self.radiobutton.toggled.connect(lambda :[self.btnclick(self.radiobutton)])
        self.radiobutton2.toggled.connect(lambda :[self.btnclick(self.radiobutton2)])
        self.pushbutton1.clicked.connect(self.train_model)


    def btnclick(self,btn):
        if btn.text() == "训练集":
            if btn.isChecked() == True:
                try:
                    self.model.test(self.model.pca_X_train,self.model.y_train)
                    self.radiobutton2.setChecked(False)
                except Exception as e:
                    print(f"{e}")
                    self.radiobutton.setChecked(False)
                try:
                    if float(eval(self.textline.text())) != self.text:
                        QMessageBox.warning(self, "waning", f'请确认是否在调整参数后进行了训练')
                    else:

                        self.label3.setText(f"{np.round(self.model.acc, 3)}")
                        self.label4.setText(f"{np.round(self.model.pre_score, 3)}")
                        self.label5.setText((f"{np.round(self.model.recall, 3)}"))

                except Exception as e:
                    QMessageBox.warning(self, "waning", f'{e}')
                    self.radiobutton.setChecked(False)

        else:
            if btn.isChecked() == True:
                try:
                    self.model.test(self.model.pca_X_test,self.model.y_test)
                    print("2323")
                    self.radiobutton.setChecked(False)
                except Exception as e:
                    print(f"{e}")
                    self.radiobutton2.setChecked(False)

                try:
                    if float(eval(self.textline.text())) != self.text:
                        QMessageBox.warning(self, "waning", f'请确认是否在调整参数后进行了训练')
                    else:

                        self.label3.setText(f"{np.round(self.model.acc, 3)}")
                        self.label4.setText(f"{np.round(self.model.pre_score, 3)}")
                        self.label5.setText((f"{np.round(self.model.recall, 3)}"))

                except Exception as e:
                    QMessageBox.warning(self, "waning", f'{e}')
                    self.radiobutton2.setChecked(False)


    def train_model(self):
        try:
            self.radiobutton.setChecked(False)
            self.radiobutton2.setChecked(False)

            size =float(eval(self.textline.text()))
            self.text = size

            if size > 1.0 or size < 0.5 :
                QMessageBox.warning(self, "waning", f'请使得训练集的占比合理即在（0.5,1)')

            try:
                self.model.size = size
                self.model.training()


                QMessageBox.information(self, "训练完成", 'SVM模型已经训练完成')
            except Exception as e :
                print(f"{e}")

        except Exception as e:
            QMessageBox.warning(self, "waning", f'{e}')




if __name__ == '__main__':

    App = QtWidgets.QApplication(sys.argv)
    model = train_SVM('att_faces')
    win = test_face(model)
    win.show()
    sys.exit(App.exec_())